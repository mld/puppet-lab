{"body":"# En laboration i puppet\r\n\r\nDet mesta av kod och konfiguration som används i det här dokumentet finns även under exempel (https://github.com/mld/puppet-lab/tree/master/exempel) uppdelat steg för steg för att enkelt kunna få en överblick.\r\n\r\n# 1. Installation\r\nI det här steget installerar vi tre Ubuntu-servrar; en puppet-master och två noder med puppet-agenten.\r\n\r\nKrav på systemen:\r\n\r\n* puppet (puppet master)\r\n  * 2G RAM\r\n  * 2 cores\r\n  * 6G disk\r\n  * Ubuntu 12.04 amd64\r\n* node1\r\n  * 1G RAM\r\n  * 1 core\r\n  * 4G disk\r\n  * Ubuntu 12.04 amd64\r\n* node2\r\n  * 1G RAM\r\n  * 1 core\r\n  * 4G disk\r\n  * Ubuntu 10.04 amd64\r\n\r\n## puppet\r\nInstallera puppetmastern.\r\n\r\n### Grundinstallation\r\n```\r\nclient$ virt-viewer --connect qemu+ssh://<user>@kvm02.example.com/system <server> &\r\n```\r\nHar du inte tillgång till virt-viewer, använd en ssh-tunnel och vnc.annars ssh-tunnel+vnc. Ta reda på vilken vnc-display din server har genom \r\n```\r\nkvm$ virsh vncdisplay <server>\r\n```\r\n\r\n### Lägg in puppets paketarkiv\r\n```\r\npuppet$ wget http://apt.puppetlabs.com/puppetlabs-release-precise.deb\r\npuppet$ sudo dpkg -i puppetlabs-release-precise.deb\r\n```\r\n### Installera puppet-agenten och gör grundkonfiguration för mastern\r\n__OBS__ Grundkonfiguration för mastern måste göras innan den startas första gången för att den interna CA:n ska bli rätt. Då puppetmastern startar automatiskt när den installeras så konfigurerar vi den i förväg.\r\n```\r\npuppet$ sudo apt-get update\r\npuppet$ sudo apt-get install puppet\r\npuppet$ sudo vim /etc/puppet/puppet.conf\r\n```\r\n\r\n__/etc/puppet/puppet.conf__ för puppetmaster:\r\n```\r\n[main]\r\nlogdir=/var/log/puppet\r\nvardir=/var/lib/puppet\r\nssldir=/var/lib/puppet/ssl\r\nrundir=/var/run/puppet\r\nfactpath=$vardir/lib/facter\r\ntemplatedir=$confdir/templates\r\n\r\n# behövs inte alltid, men är en fördel att ha. default är puppet.<domän>\r\nserver=puppet.x.lab.example.com\r\nreport=true\r\n# Behöver normalt inte sättas, fqdn används default\r\ncertnamepuppet.x.lab.example.com\r\npluginsync = true\r\n\r\n[master]\r\n# These are needed when the puppetmaster is run by passenger\r\n# and can safely be removed if webrick is used.\r\nssl_client_header = SSL_CLIENT_S_DN \r\nssl_client_verify_header = SSL_CLIENT_VERIFY\r\n\r\n# behövs inte, men kan vara trevligt om man vet att man har en standbyserver som man kan tänkas växla över till\r\n#dns_alt_names=puppet.lab.example.com\r\nreports=log\r\n```\r\n\r\n__Valfritt:__ För att puppet-agenten ska starta automatiskt behöver även /etc/default/puppet ändras:\r\n```\r\n# Defaults for puppet - sourced by /etc/init.d/puppet\r\n\r\n# Start puppet on boot?\r\nSTART=yes\r\n\r\n# Startup options\r\nDAEMON_OPTS=\"\"\r\n```\r\n\r\n### Installera puppetmaster\r\n```\r\npuppet$ sudo apt-get install puppetmaster\r\n```\r\n\r\n\r\n\r\n## node1 och node2\r\nInstallera bägge noderna.\r\n\r\n### Grundinstallation\r\n```\r\nclient$ virt-viewer --connect qemu+ssh://<user>@kvm02.example.com/system <server> &\r\n```\r\nHar du inte tillgång till virt-viewer, använd en ssh-tunnel och vnc.annars ssh-tunnel+vnc. Ta reda på vilken vnc-display din server har genom \r\n```\r\nkvm$ virsh vncdisplay <server>\r\n```\r\n\r\n### Lägg in puppets paketarkiv\r\nInitiera noderna med puppet och en grundkonfiguration.\r\n\r\n### node1 (Ubuntu 12.04)\r\n```\r\nnode1$ wget http://apt.puppetlabs.com/puppetlabs-release-precise.deb\r\nnode1$ sudo dpkg -i puppetlabs-release-precise.deb\r\nnode1$ sudo apt-get update\r\nnode1$ sudo apt-get install puppet\r\nnode1$ sudo vim /etc/puppet/puppet.conf\r\n```\r\n### node2 (Ubuntu 10.04)\r\n```\r\nnode2$ wget http://apt.puppetlabs.com/puppetlabs-release-lucid.deb\r\nnode2$ sudo dpkg -i puppetlabs-release-lucid.deb\r\nnode2$ sudo apt-get update\r\nnode2$ sudo apt-get install puppet\r\nnode2$ sudo vim /etc/puppet/puppet.conf\r\n```\r\n__/etc/puppet/puppet.conf__ för noder:\r\n```\r\n[main]\r\nlogdir=/var/log/puppet\r\nvardir=/var/lib/puppet\r\nssldir=/var/lib/puppet/ssl\r\nrundir=/var/run/puppet\r\nfactpath=$vardir/lib/facter\r\ntemplatedir=$confdir/templates\r\n\r\n# behövs inte alltid, men är en fördel att ha. default är puppet.<domän>\r\nserver=puppet.x.lab.example.com\r\nreport=true\r\n# Behöver normalt inte sättas, fqdn används default\r\ncertname=node1.x.lab.example.com\r\npluginsync = true\r\n```\r\n\r\n__Valfritt:__ För att puppet-agenten ska starta automatiskt behöver även /etc/default/puppet ändras:\r\n```\r\n# Defaults for puppet - sourced by /etc/init.d/puppet\r\n\r\n# Start puppet on boot?\r\nSTART=yes\r\n\r\n# Startup options\r\nDAEMON_OPTS=\"\"\r\n```\r\n\r\nMan kan även lägga in ytterligare parametrar i /etc/puppet.conf, t ex:\r\n```\r\n    runinterval = 1800\r\n    splaylimit = 1800\r\n    splay = false\r\n```\r\n\r\n\r\n# 2. resolv.conf\r\nI den här delen ansluter vi noderna till puppet-mastern, börjar med en do-nothing-conf för puppet och lägger sedan till en modul som hanterar /etc/resolv.conf.\r\n\r\n## Anslut noderna till puppetmastern\r\n\r\nPå node1 respektive node2, kör följande:\r\n```\r\nsudo puppet agent --no-daemonize --verbose --waitforcert=10\r\n```\r\nDet här skapar en privat nyckel för noden och i samarbete med mastern en csr, sen väntar klienten på att få tillbaka ett certifikat från mastern.\r\n\r\nExempelkörning:\r\n```\r\nnode1$ sudo puppet agent --no-daemonize --verbose --waitforcert=10\r\nInfo: Creating a new SSL key for node1.lab.example.com\r\nError: Could not request certificate: Connection refused - connect(2)\r\nError: Could not request certificate: Connection refused - connect(2)\r\nError: Could not request certificate: Connection refused - connect(2)\r\nInfo: Caching certificate for ca\r\nInfo: Creating a new SSL certificate request for node1.lab.example.com\r\nInfo: Certificate Request fingerprint (SHA256): 41:74:15:CE:44:7B:52:06:11:69:98:FC:B7:53:F2:B7:BA:B2:F1:5B:4F:8F:A0:E1:FD:39:10:50:C8:C2:75:BC\r\nDid not receive certificate\r\n\r\nDid not receive certificate\r\nInfo: Caching certificate for node1.lab.example.com\r\nStarting Puppet client version 3.0.1\r\nInfo: Caching certificate_revocation_list for ca\r\nInfo: Retrieving plugin\r\nUsing cached catalog\r\nError: Could not retrieve catalog; skipping run\r\n```\r\n\r\n\r\nPå puppetmastern kommer du efteråt kunna se något liknande det här:\r\n```\r\npuppet$ sudo puppet cert --list\r\n  \"node1.lab.example.com\" (SHA256) 41:74:15:CE:44:7B:52:06:11:69:98:FC:B7:53:F2:B7:BA:B2:F1:5B:4F:8F:A0:E1:FD:39:10:50:C8:C2:75:BC\r\n  \"node2.lab.example.com\" (SHA256) 51:84:25:AB:44:7B:52:06:11:69:98:FC:B7:53:F2:B7:BA:B2:F1:5B:4F:8F:A0:E1:FD:39:10:50:C8:C2:75:BC\r\n```\r\nNästa steg är att signera nod-certifikaten:\r\n```\r\npuppet$ sudo puppet cert --sign node1.lab.example.com\r\nSigned certificate request for node1.lab.example.com\r\nRemoving file Puppet::SSL::CertificateRequest node1.lab.example.com at '/var/lib/puppet/ssl/ca/requests/node1.lab.example.com.pem'\r\n```\r\n\r\nNu pratar förhoppningsvis bägge noderna med puppetmastern och vi är redo att göra något på riktigt!\r\n\r\n## Skapa grundkonfiguration för noderna\r\n__/etc/puppet/manifests/site.pp__:\r\n```\r\n$puppetserver = 'puppet.lab.example.com'\r\n\r\nnode 'puppet.lab.example.com' {\r\n\r\n}\r\nnode 'node1.lab.example.com' {\r\n\r\n}\r\nnode 'node2.lab.example.com' {\r\n\r\n}\r\n\r\n```\r\n\r\n## Bygg resolvconf-modulen\r\n\r\n__/etc/puppet/modules/resolvconf/manifests/init.pp__:\r\n```\r\nclass resolvconf {\r\n\r\n    package { 'resolvconf':\r\n        ensure\t=> purged\r\n    }\r\n\r\n    file { \"/etc/resolv.conf\":\r\n        source\t=> 'puppet:///modules/resolvconf/etc/resolv.conf',\r\n        owner   => root,\r\n        group   => root,\r\n        mode    => 0644,\r\n        ensure\t=> file,\r\n        require\t=> Package['resolvconf'],\r\n    }\r\n}\r\n```\r\n\r\n__/etc/puppet/modules/resolvconf/files/etc/resolv.conf__:\r\n```\r\nnameserver 8.8.8.8\r\nnameserver 8.8.4.4\r\nsearch lab.example.com\r\n```\r\n\r\nInkludera resolvconf-modulen på en nod.\r\n__/etc/puppet/manifests/site.pp:__\r\n```\r\n$puppetserver = 'puppet.lab.example.com'\r\n\r\nnode 'puppet.lab.example.com' {\r\n\r\n}\r\nnode 'node1.lab.example.com' {\r\n  include resolvconf\r\n}\r\nnode 'node2.lab.example.com' {\r\n\r\n}\r\n```\r\n\r\nKör agenten en gång på node1 för att se att det fungerar:\r\n```\r\nnode1$ sudo puppet agent --no-daemonize --verbose --onetime\r\nInfo: Retrieving plugin\r\nInfo: Caching catalog for node1.lab.example.com\r\nInfo: Applying configuration version '1352643134'\r\nInfo: FileBucket got a duplicate file {md5}a3833cde72f68a4da35d51db380b8978\r\nInfo: /Stage[main]/Resolvconf/File[/etc/resolv.conf]: Filebucketed /etc/resolv.conf to puppet with sum a3833cde72f68a4da35d51db380b8978\r\n/Stage[main]/Resolvconf/File[/etc/resolv.conf]/content: content changed '{md5}a3833cde72f68a4da35d51db380b8978' to '{md5}84e65d653359f3bf2328139427d085b9'\r\nFinished catalog run in 0.30 seconds\r\n\r\nnode1$ cat /etc/resolv.conf \r\nnameserver 8.8.8.8\r\nnameserver 8.8.4.4\r\nsearch lab.example.com\r\n```\r\n\r\nNu kan du inkludera resolvconf-modulen på övriga noder också.\r\n\r\n## Mer...\r\n\r\nTesta även att göra om source-parametern för filen till en array, t ex:\r\n```\r\nsource\t=> [\"puppet:///modules/resolvconf/etc/resolv.conf.$hostname\", 'puppet:///modules/resolvconf/etc/resolv.conf']\r\n```\r\n\r\n# 3. OpenSSH\r\n\r\nOpenSSH-modulen blir väldigt lik den för resolvconf, men vi låter den ta emot en parameter (rootlogin) för att hantera direktivet PermitRootLogin i /etc/sshd_config och väljer dessutom vilken mall vi ska utgå ifrån beroende på vilken distribution vi kör just nu.\r\n\r\nVi kommer använda oss av \r\n+ parameterized classes, se http://docs.puppetlabs.com/learning/modules2.html\r\n+ templates, se http://docs.puppetlabs.com/learning/templates.html\r\n\r\n## Modulen\r\n__/etc/puppet/modules/openssh/manifests/init.pp__:\r\n```\r\nclass openssh($rootlogin = 'without-password') {\r\n\tcase $lsbdistcodename {\r\n\t\t'lucid': {\r\n\t\t\t$conf_template = 'sshd_config.lucid.erb'\r\n\t\t}\r\n\t\t'precise': {\r\n\t\t\t$conf_template = 'sshd_config.precise.erb'\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\t$conf_template = 'sshd_config.erb'\r\n\t\t}\r\n\t}\r\n\r\n\tfile { \"/etc/ssh/sshd_config\":\r\n\t\tensure => present,\r\n\t\tcontent => template(\"openssh/${conf_template}\"),\r\n\t\towner => \"root\",\r\n\t\tgroup => \"root\",\r\n\t\tmode => \"644\",\r\n\t\trequire => Package[\"openssh-server\"],\r\n\t\tnotify => Service[\"ssh\"],\r\n\t}\r\n\r\n\tpackage { \"openssh-server\":\r\n\t\tensure => latest,\r\n\t}\r\n\r\n\tservice { 'ssh':\r\n\t\tname => \"ssh\",\r\n\t\tensure => running,\r\n\t\thasrestart => true,\r\n\t\tenable => true,\r\n\t\trequire => Package['openssh-server'],\r\n\t}\r\n}\r\n```\r\n\r\n__/etc/puppet/modules/openssh/templates/sshd_config.precise.erb__:\r\n```\r\n# Configuration for ssh server on Ubuntu Precise (12.04)\r\n# See the sshd_config(5) manpage for details\r\n\r\nPort 22\r\nProtocol 2\r\n\r\nHostKey /etc/ssh/ssh_host_rsa_key\r\nHostKey /etc/ssh/ssh_host_dsa_key\r\nHostKey /etc/ssh/ssh_host_ecdsa_key\r\nUsePrivilegeSeparation yes\r\n\r\nKeyRegenerationInterval 3600\r\nServerKeyBits 768\r\n\r\nSyslogFacility AUTH\r\nLogLevel INFO\r\n\r\nLoginGraceTime 120\r\nPermitRootLogin <%= rootlogin %>\r\nStrictModes yes\r\n\r\nRSAAuthentication yes\r\nPubkeyAuthentication yes\r\n\r\nIgnoreRhosts yes\r\nRhostsRSAAuthentication no\r\nHostbasedAuthentication no\r\n\r\nPermitEmptyPasswords no\r\n\r\nChallengeResponseAuthentication no\r\n\r\n# Change to no to disable tunnelled clear text passwords\r\n#PasswordAuthentication yes\r\n\r\nX11Forwarding yes\r\nX11DisplayOffset 10\r\nPrintMotd no\r\nPrintLastLog yes\r\nTCPKeepAlive yes\r\n\r\nAcceptEnv LANG LC_*\r\n\r\nSubsystem sftp /usr/lib/openssh/sftp-server\r\n\r\nUsePAM yes\r\n```\r\n\r\n__/etc/puppet/modules/openssh/templates/sshd_config.lucid.erb__:\r\n```\r\n# Configuration for ssh server on Ubuntu Lucid (10.04)\r\n# See the sshd_config(5) manpage for details\r\n\r\nPort 22\r\nProtocol 2\r\n\r\nHostKey /etc/ssh/ssh_host_rsa_key\r\nHostKey /etc/ssh/ssh_host_dsa_key\r\nUsePrivilegeSeparation yes\r\n\r\nKeyRegenerationInterval 3600\r\nServerKeyBits 768\r\n\r\nSyslogFacility AUTH\r\nLogLevel INFO\r\n\r\nLoginGraceTime 120\r\nPermitRootLogin <%= rootlogin %>\r\nStrictModes yes\r\n\r\nRSAAuthentication yes\r\nPubkeyAuthentication yes\r\n\r\nIgnoreRhosts yes\r\nRhostsRSAAuthentication no\r\nHostbasedAuthentication no\r\n\r\nPermitEmptyPasswords no\r\n\r\nChallengeResponseAuthentication no\r\n\r\n# Change to no to disable tunnelled clear text passwords\r\n#PasswordAuthentication yes\r\n\r\nX11Forwarding yes\r\nX11DisplayOffset 10\r\nPrintMotd no\r\nPrintLastLog yes\r\nTCPKeepAlive yes\r\n\r\nAcceptEnv LANG LC_*\r\n\r\nSubsystem sftp /usr/lib/openssh/sftp-server\r\n\r\nUsePAM yes\r\n```\r\n\r\n__/etc/puppet/modules/openssh/templates/sshd_config.erb__:\r\n```\r\n# Default configuration for ssh server\r\n# See the sshd_config(5) manpage for details\r\n\r\nPort 22\r\nProtocol 2\r\n\r\nHostKey /etc/ssh/ssh_host_rsa_key\r\nHostKey /etc/ssh/ssh_host_dsa_key\r\nUsePrivilegeSeparation yes\r\n\r\nKeyRegenerationInterval 3600\r\nServerKeyBits 768\r\n\r\nSyslogFacility AUTH\r\nLogLevel INFO\r\n\r\nLoginGraceTime 120\r\nPermitRootLogin <%= rootlogin %>\r\nStrictModes yes\r\n\r\nRSAAuthentication yes\r\nPubkeyAuthentication yes\r\n\r\nIgnoreRhosts yes\r\nRhostsRSAAuthentication no\r\nHostbasedAuthentication no\r\n\r\nPermitEmptyPasswords no\r\n\r\nChallengeResponseAuthentication no\r\n\r\n# Change to no to disable tunnelled clear text passwords\r\n#PasswordAuthentication yes\r\n\r\nX11Forwarding yes\r\nX11DisplayOffset 10\r\nPrintMotd no\r\nPrintLastLog yes\r\nTCPKeepAlive yes\r\n\r\nAcceptEnv LANG LC_*\r\n\r\nSubsystem sftp /usr/lib/openssh/sftp-server\r\n\r\nUsePAM yes\r\n```\r\n\r\n## site.pp\r\n\r\nHär har vi ett nytt sätt att anropa en modul/klass, eftersom vi valt att kunna skicka med parametrar:\r\n\r\n```\r\n$puppetserver = 'puppet.lab.example.com'\r\n\r\nnode 'puppet.lab.example.com' {\r\n\r\n}\r\nnode 'node1.lab.example.com' {\r\n  include resolvconf\r\n  class { 'openssh': rootlogin => 'no' }\r\n}\r\nnode 'node2.lab.example.com' {\r\n  include resolvconf\r\n  class { 'openssh': rootlogin => 'without-password' }\r\n}\r\n```\r\n\r\n## Testa...\r\n\r\nKör puppet agent på noderna:\r\n```\r\nnode1$ sudo puppet agent --no-daemonize --verbose --onetime\r\n...\r\n\r\nnode2$ sudo puppet agent --no-daemonize --verbose --onetime\r\n...\r\n```\r\n\r\nKontrollera att du fått ut precise respektive lucid-confen på dom olika noderna.\r\n\r\nLägg till ytterligare en parameter i openssh-klassen, PasswordAuthentication. Testa...\r\n\r\n# 4. Hiera\r\nHiera är ett verktyg för att på ett samlat sätt skicka in parametrar till noder, klasser och moduler. Från Puppet 3.0 följer det med automatiskt i puppetinstallationen. Läs mer om Hiera på http://puppetlabs.com/blog/first-look-installing-and-using-hiera/\r\n\r\nVi sätter upp hiera att hämta information i tre nivåer. Första nivån är om det finns en fil tillgänglig för ett unikt fqdn, t ex node1.lab.example.com.yaml. Nästa nivå är baserad på dist-namn, t ex precise eller lucid. Dom hämtas från lucid.yaml, precise.yaml, ...\r\nDen tredje nivån är defaultvärden som ligger i common.yaml.\r\n\r\n## Förberedelser\r\n\r\n### Konfigurerara Hiera\r\n__/etc/puppet/hiera.yaml__:\r\n```\r\n---\r\n:hierarchy:\r\n    - %{fqdn}\r\n    - %{lsbdistcodename}\r\n    - common\r\n:backends:\r\n    - yaml\r\n:yaml:\r\n    :datadir: '/etc/puppet/hieradata'\r\n```\r\n\r\n### Lägg in data i hiera\r\n__/etc/puppet/hieradata/common.yaml__:\r\n```\r\n---\r\nroot_login : 'no'\r\n```\r\n\r\n__/etc/puppet/hieradata/precise.yaml__:\r\n```\r\n---\r\nroot_login : 'without-password'\r\n```\r\n\r\n__/etc/puppet/hieradata/node2.lab.example.com.yaml__:\r\n```\r\n---\r\nroot_login : 'yes'\r\n```\r\n\r\n### Anpassa OpenSSH-modulen\r\nÄndra första raden i init.pp så den använder hiera som defaultvärde.\r\n\r\n__/etc/puppet/modules/openssh/manifests/init.pp__:\r\n```\r\nclass openssh($rootlogin = hiera('root_login')) {\r\n```\r\n\r\nTestkör på noderna och se att hierarkin fungerar som den ska. Notera att i det här exemplet är deta från hiera default-värdet, och kan köras över från nod-definitionen!\r\n\r\n## Gå vidare med Hiera...\r\n\r\n+ Lägg till fler variabler för OpenSSH-modulen. \r\n+ Anpassa resolvconf-modulen så den tar namnservrar i form av en yaml-array från hiera.\r\n+ Installera och experimentera med hiera-gpg. Se http://www.craigdunn.org/2011/10/secret-variables-in-puppet-with-hiera-and-gpg/\r\n\r\n# Mycket mer att titta på\r\n\r\nHär är ett par idéer på annat att testa och/eller se över om det över huvud taget är möjligt att bygga ihop.\r\n## Custom facts i facter\r\n+ http://docs.puppetlabs.com/guides/plugins_in_modules.html\r\n+ http://docs.puppetlabs.com/guides/custom_facts.html\r\n\r\n## PuppetDB\r\n+ Installera, testa, utvärdera\r\nSe http://docs.puppetlabs.com/puppetdb/1/index.html\r\n\r\n## Puppet Dashboard\r\n+ Installera, testa, utvärdera\r\n  + Slut på support från Puppet Labs, men kommer troligen leva kvar länge\r\n\r\nSe http://docs.puppetlabs.com/dashboard/\r\n\r\n## Testa environments, både i Puppet och Hiera\r\nSe \r\n+ http://docs.puppetlabs.com/guides/environment.html\r\n+ http://puppetlabs.com/blog/first-look-installing-and-using-hiera/\r\n\r\n## MCollective\r\n+ Installera, testa, utvärdera\r\n\r\nSe http://docs.puppetlabs.com/mcollective/index.html\r\n\r\n# Mer långsiktigt, kanske...\r\n## Puppetmaster som Intermedia-CA för en intern (eller extern?) CA\r\nDet råder tveksamheter om det är möjligt i v3.x av Puppet, men det finns requests på att lösa det.\r\n\r\n## Puppet och Kerberos/LDAP\r\n+ Användarhanteringen - använda lokala användare, men utgå från LDAP, med puppet som distributionsform?\r\n+ Använda Kerberos istället för SSL för autenticering mellan puppetmaster och agenter","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Puppet-lab","tagline":""}